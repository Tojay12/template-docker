'cluster-mode' = false
'config-type' = 'setup'
'account-email-password-resetter' (class: tigase.extras.passwordreset.EmailPasswordResetter,
    active: false,
    exportable: true) {
    subject = 'Password reset'
    templateFile = 'mails/email-password-reset.template'
    tokenVerifierURL = null
}
'account-registration-email-validator' (class: tigase.extras.emailconfirm.EmailConfirmationSender,
    active: false,
    exportable: true) {
    subject = 'Email confirmation'
    templateFile = 'mails/email-confirmation.template'
    tokenVerifierURL = 'http://3b85ba8927bc:8080/rest/user/confirm/'
}
beanSelector (class: tigase.kernel.beans.selector.ServerBeanSelector,
    exportable: true) {}
'certificate-container' (class: tigase.io.CertificateContainer,
    exportable: true) {
    removeRootCACertificate = true
    'sni-disable' = false
    'ssl-certs-location' = [ 'certs/' ]
    'ssl-def-cert-domain' = 'default'
    'trusted-certs-dir' = [ '/etc/ssl/certs' ]
    'custom-certificates' {}
    repository (class: tigase.io.repo.CertificateRepository,
        active: false) {
        'move-from-filesystem-to-repository' = true
        'repo-autoreload-interval' = 3600L
    }
}
classUtilBean (class: tigase.util.reflection.ClassUtilBean,
    exportable: true) {}
defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility,
    exportable: true) {}
defaultTypesConverter (class: tigase.kernel.DefaultTypesConverter,
    exportable: true) {}
eventBus (class: tigase.eventbus.impl.EventBusImplementation,
    exportable: true) {}
ext (class: tigase.server.ext.ComponentProtocol,
    active: false) {
    'auth-timeout' = 15L
    'bind-ext-hostnames' = [  ]
    'close-on-seq-error' = true
    connectionDelay = 2000L
    'elements-number-limit' = 1000
    experimental = false
    'identity-type' = 'generic'
    ifc = [ '*' ]
    'max-auth-attempts' = 1
    'net-buffer' = 65536
    'socket-buffer-size' = 65536
    connections (class: tigase.server.ConnectionManager$PortsConfigBean) {
        ports = null
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    }
    defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'ephemeral-key-size' = 4096
        'hardened-mode' = secure
        'max-handshake-message-size' = 65536
        'tls-disable-tls13' = false
        'tls-disabled-ciphers' = null
        'tls-disabled-protocols' = null
        'tls-enabled-ciphers' = null
        'tls-enabled-protocols' = null
        'tls-jdk-nss-bug-workaround-active' = false
    }
}
http (class: tigase.http.HttpMessageReceiver) {
    admins = [  ]
    compId = 'http@3b85ba8927bc'
    defHostname = 3b85ba8927bc
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    commands {}
    'disco-extensions' {}
    'host-name-stats-collector' (class: tigase.http.stats.HostNameStatsCollector,
        active: false) {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    setup (class: tigase.http.modules.setup.SetupModule) {
        'admin-password' = 'tigase'
        'admin-user' = 'admin'
        'context-path' = '/setup'
        vhosts = null
    }
    setupRedirect (class: tigase.http.modules.setup.SetupModeRedirectModule) {
        'context-path' = '/'
        vhosts = null
    }
}
httpServer (class: tigase.http.java.JavaStandaloneHttpServer,
    exportable: true) {
    connections (class: tigase.http.java.JavaStandaloneHttpServer$PortsConfigBean,
        exportable: true) {
        ports = [ 8080 ]
        8080 (class: tigase.http.java.JavaStandaloneHttpServer$PortConfigBean) {
            domain = null
            redirectCondition = never
            redirectUri = null
            socket = plain
        }
    }
    executor (class: tigase.http.java.JavaStandaloneHttpServer$ExecutorWithTimeout,
        exportable: true) {
        'accept-timeout' = 2000
        'request-timeout' = 60000
        threads = 4
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'ephemeral-key-size' = 4096
        'hardened-mode' = secure
        'max-handshake-message-size' = 65536
        'tls-disable-tls13' = false
        'tls-disabled-ciphers' = null
        'tls-disabled-protocols' = null
        'tls-enabled-ciphers' = [
            'TLS_AES_256_GCM_SHA384',
            'TLS_AES_128_GCM_SHA256',
            'TLS_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA',
            'TLS_EMPTY_RENEGOTIATION_INFO_SCSV'
        ]
        'tls-enabled-protocols' = [ 'TLSv1.3', 'TLSv1.2' ]
        'tls-jdk-nss-bug-workaround-active' = false
    }
}
logging (class: tigase.conf.LoggingBean) {
    debug = null
    'debug-packages' = null
    'packet-debug-full' = false
    rootHandlers = [ 'java.util.logging.ConsoleHandler', 'java.util.logging.FileHandler' ]
    rootLevel = CONFIG
    'shutdown-thread-dump' = true
    handlers {
        'java.util.logging.ConsoleHandler' {
            formatter = 'tigase.util.log.LogFormatter'
            level = INFO
        }
        'java.util.logging.FileHandler' {
            append = true
            count = 5
            formatter = 'tigase.util.log.LogFormatter'
            level = ALL
            limit = 10000000
            pattern = 'logs/tigase.log'
        }
    }
    loggers {
        tigase {
            useParentHandlers = true
        }
        'tigase.kernel.core.Kernel' {
            level = 'CONFIG'
        }
    }
}
mdns (class: MDnsComponent,
    active: false) {
    admins = [  ]
    compId = null
    defHostname = 3b85ba8927bc
    'ignore-link-local' = true
    'scripts-dir' = 'scripts/admin'
    'server-host' = '3b85ba8927bc'
    'server-name' = 'Tigase XMPP Server'
    'single-server' = false
    trusted = null
    commands {}
    defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    'disco-extensions' {}
}
'message-router' (class: tigase.server.MessageRouter) {
    admins = [  ]
    compId = 'message-router@3b85ba8927bc'
    defHostname = 3b85ba8927bc
    'detailed-memory-statistics' = false
    disco_name = 'Tigase'
    disco_show_version = true
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    commands {}
    'disco-extensions' {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    'update-checker' (class: tigase.util.updater.UpdatesChecker) {
        admins = [  ]
        delay = PT168H
        notificationsEnabled = true
        period = PT168H
    }
}
nonAuthUserRepository (class: tigase.db.NonAuthUserRepositoryImpl,
    exportable: true) {
    'offline-user-autocreate' = false
}
'registration-throttling' (class: tigase.server.xmppclient.RegistrationThrottling,
    active: false,
    exportable: true) {
    limit = 4
    period = PT24H
}
rootSslContextContainer (class: tigase.io.SSLContextContainer$Root,
    exportable: true) {
    'ephemeral-key-size' = 4096
    'hardened-mode' = secure
    'max-handshake-message-size' = 65536
    'tls-disable-tls13' = false
    'tls-disabled-ciphers' = null
    'tls-disabled-protocols' = null
    'tls-enabled-ciphers' = null
    'tls-enabled-protocols' = null
    'tls-jdk-nss-bug-workaround-active' = false
}
rosterFactory (class: tigase.xmpp.impl.roster.RosterFactory$Bean,
    exportable: true) {
    'roster-implementation' = 'tigase.xmpp.impl.roster.RosterFlat'
}
'stanza-source-checker' (class: tigase.server.StanzaSourceChecker,
    exportable: true) {}
'status-report-generator' (class: tigase.server.monitor.StatusReportGenerator) {
    reportGeneratorEnabled = true
}
test (class: tigase.server.test.TestComponent,
    active: false) {
    admins = [  ]
    compId = null
    defHostname = 3b85ba8927bc
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 12
    'processing-out-threads' = 12
    'scheduler-threads' = 1
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    commands {}
    defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    disco (class: tigase.component.modules.impl.DiscoveryModule) {}
    'disco-extensions' {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    'test-generator-module' (class: tigase.server.test.TestGeneratorModule) {}
    'test-spam-module' (class: tigase.server.test.TestSpamModule) {
        'abuse-address' = 'abuse@locahost'
        'bad-words' = [ 'word1', 'word2', 'word3' ]
        'log-prepend' = 'Spam detected: '
        'notification-frequency' = 10
        'packet-types' = [ 'message', 'presence', 'iq' ]
        'secure-logging' = false
        'white-list' = [ 'admin@localhost' ]
    }
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
