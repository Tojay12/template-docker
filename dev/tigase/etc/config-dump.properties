admins = [ 'admin@618ef78a83fd' ]
'cluster-mode' = false
'config-type' = 'default'
debug = [ 'server' ]
'default-virtual-host' = '618ef78a83fd'
dataSource (class: tigase.db.beans.DataSourceBean,
    exportable: true) {
    default (class: tigase.db.beans.DataSourceBean$DataSourceMDConfigBean) {
        'pool-class' = null
        'pool-size' = 48
        'repo-class' = null
        'repo-uri' = 'jdbc:mysql://192.168.1.54:3307/tigase_db?user=tigase_user&password=******&useSSL=false&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true'
        'watchdog-frequency' = PT1H
        instance (class: tigase.db.DataRepositoryPool) {}
        'repo-0' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-1' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-10' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-11' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-12' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-13' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-14' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-15' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-16' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-17' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-18' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-19' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-2' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-20' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-21' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-22' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-23' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-24' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-25' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-26' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-27' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-28' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-29' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-3' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-30' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-31' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-32' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-33' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-34' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-35' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-36' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-37' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-38' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-39' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-4' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-40' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-41' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-42' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-43' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-44' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-45' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-46' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-47' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-5' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-6' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-7' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-8' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
        'repo-9' (class: tigase.db.jdbc.DataRepositoryImpl) {
            'db-conn-timeout' = 15
            'schema-management' = true
            'sql-query-timeout' = 10
            useCallableMysqlWorkaround = false
        }
    }
}
userRepository (class: tigase.db.beans.UserRepositoryMDPoolBean,
    exportable: true) {
    statistics = true
    default (class: tigase.db.beans.UserRepositoryMDPoolBean$UserRepositoryConfigBean) {
        admins = [ 'admin@618ef78a83fd' ]
        'cluster-mode' = false
        'config-type' = 'default'
        'data-source' = null
        debug = [ 'server' ]
        'default-virtual-host' = '618ef78a83fd'
        name = 'default'
        'repo-class' = null
        instance (class: tigase.db.jdbc.JDBCRepository) {}
    }
}
authRepository (class: tigase.db.beans.AuthRepositoryMDPoolBean,
    exportable: true) {
    statistics = true
    default (class: tigase.db.beans.AuthRepositoryMDPoolBean$AuthRepositoryConfigBean) {
        admins = [ 'admin@618ef78a83fd' ]
        'cluster-mode' = false
        'config-type' = 'default'
        'data-source' = null
        debug = [ 'server' ]
        'default-virtual-host' = '618ef78a83fd'
        name = 'default'
        'repo-class' = null
        credentialDecoders (class: tigase.auth.CredentialsDecoderBean) {
            'MD5-PASSWORD' (class: tigase.auth.credentials.entries.MD5PasswordCredentialsEntry$Decoder,
                active: false) {}
            'MD5-USERID-PASSWORD' (class: tigase.auth.credentials.entries.MD5UserIdPasswordCredentialsEntry$Decoder,
                active: false) {}
            'MD5-USERNAME-PASSWORD' (class: tigase.auth.credentials.entries.MD5UsernamePasswordCredentialsEntry$Decoder,
                active: false) {}
            PLAIN (class: tigase.auth.credentials.entries.PlainCredentialsEntry$Decoder) {}
            'SCRAM-SHA-1' (class: tigase.auth.credentials.entries.ScramSha1CredentialsEntry$Decoder) {
                algorithm = 'SHA1'
            }
            'SCRAM-SHA-256' (class: tigase.auth.credentials.entries.ScramSha256CredentialsEntry$Decoder) {
                algorithm = 'SHA-256'
            }
            'SCRAM-SHA-512' (class: tigase.auth.credentials.entries.ScramSha512CredentialsEntry$Decoder,
                active: false) {
                algorithm = 'SHA-512'
            }
        }
        credentialEncoders (class: tigase.auth.CredentialsEncoderBean) {
            'MD5-PASSWORD' (class: tigase.auth.credentials.entries.MD5PasswordCredentialsEntry$Encoder,
                active: false) {}
            'MD5-USERID-PASSWORD' (class: tigase.auth.credentials.entries.MD5UserIdPasswordCredentialsEntry$Encoder,
                active: false) {}
            'MD5-USERNAME-PASSWORD' (class: tigase.auth.credentials.entries.MD5UsernamePasswordCredentialsEntry$Encoder,
                active: false) {}
            PLAIN (class: tigase.auth.credentials.entries.PlainCredentialsEntry$Encoder,
                active: false) {}
            'SCRAM-SHA-1' (class: tigase.auth.credentials.entries.ScramSha1CredentialsEntry$Encoder) {
                algorithm = 'SHA1'
                iterations = 4096
            }
            'SCRAM-SHA-256' (class: tigase.auth.credentials.entries.ScramSha256CredentialsEntry$Encoder) {
                algorithm = 'SHA-256'
                iterations = 4096
            }
            'SCRAM-SHA-512' (class: tigase.auth.credentials.entries.ScramSha512CredentialsEntry$Encoder) {
                algorithm = 'SHA-512'
                iterations = 4096
            }
        }
        instance (class: tigase.db.jdbc.TigaseCustomAuth) {
            'active-users-count-query' = 'select count(*) from tig_users where last_used > ?'
            'add-user-query' = '{ call TigAddUserPlainPw(?, ?) }'
            'del-user-query' = '{ call TigRemoveUser(?) }'
            'get-account-credentialids-query' = '{ call TigUserUsernames_Get(?) }'
            'get-account-credentials-query' = '{ call TigUserCredentials_Get(?,?) }'
            'init-db-query' = null
            'non-sasl-mechs' = [ 'password' ]
            'remove-account-credential-query' = '{ call TigUserCredential_Remove(?,?) }'
            'sasl-mechs' = [ 'PLAIN' ]
            'update-account-credential-query' = '{ call TigUserCredential_Update(?,?,?,?) }'
            'update-login-time-query' = '{ call TigUpdateLoginTime(?) }'
            'user-account-status-query' = '{ call TigAccountStatus(?) }'
            'user-login-query' = null
            'user-logout-query' = null
            'user-update-account-status-query' = '{ call TigUpdateAccountStatus(?, ?) }'
            'users-count-query' = '{ call TigAllUsersCount() }'
            'users-domain-count-query' = 'select count(*) from tig_users where user_id like ?'
            'users-list-disabled-accounts-query' = '{ call TigDisabledAccounts() }'
        }
    }
}
'account-email-password-resetter' (class: tigase.extras.passwordreset.EmailPasswordResetter,
    active: false,
    exportable: true) {
    subject = 'Password reset'
    templateFile = 'mails/email-password-reset.template'
    tokenVerifierURL = null
}
'account-registration-email-validator' (class: tigase.extras.emailconfirm.EmailConfirmationSender,
    active: false,
    exportable: true) {
    subject = 'Email confirmation'
    templateFile = 'mails/email-confirmation.template'
    tokenVerifierURL = 'http://618ef78a83fd:8080/rest/user/confirm/'
}
amp (class: tigase.server.amp.AmpComponent) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'amp@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 48
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    alert (class: tigase.server.amp.action.Alert) {
        security = STRICT
    }
    broadcast (class: tigase.server.amp.action.Broadcast) {}
    commands {}
    deliver (class: tigase.server.amp.action.Deliver) {
        security = STRICT
    }
    'disco-extensions' {}
    drop (class: tigase.server.amp.action.Drop) {
        security = STRICT
    }
    error (class: tigase.server.amp.action.Error) {
        security = STRICT
    }
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    msgBroadcastRepository (class: tigase.server.amp.db.MsgBroadcastRepository$MsgBroadcastRepositoryBean) {
        dataSourceSelection = List
        statistics = true
        aliases {}
        default (class: tigase.server.amp.db.MsgBroadcastRepository$MsgBroadcastRepositoryBean$MsgBroadcastRepositoryConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.server.amp.db.JDBCMsgBroadcastRepository) {
                'add-message' = '{ call Tig_BroadcastMessages_AddMessage(?,?,?) }'
                'add-message-recipient' = '{ call Tig_BroadcastMessages_AddMessageRecipient(?,?) }'
                'get-message-recipients' = '{ call Tig_BroadcastMessages_GetMessageRecipients(?) }'
                'get-messages' = '{ call Tig_BroadcastMessages_GetMessages(?) }'
            }
        }
    }
    notify (class: tigase.server.amp.action.Notify) {
        security = STRICT
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    store (class: tigase.server.amp.action.Store) {
        security = STRICT
    }
}
beanSelector (class: tigase.kernel.beans.selector.ServerBeanSelector,
    exportable: true) {}
bosh (class: tigase.server.bosh.BoshConnectionManager) {
    admins = [
        'admin@618ef78a83fd'
    ]
    'batch-queue-timeout' = 100L
    'bosh-close-connection' = false
    'bosh-extra-headers-file' = 'etc/bosh-extra-headers.txt'
    'bosh-session-close-delay' = 0L
    'client-access-policy-file' = 'etc/client-access-policy.xml'
    compId = 'bosh@618ef78a83fd'
    'concurrent-requests' = 2
    connectionDelay = 2000L
    'cross-domain-policy-file' = 'etc/cross-domain-policy.xml'
    defHostname = 618ef78a83fd
    'elements-number-limit' = 1000
    'hold-requests' = 1
    ifc = [ '*' ]
    last_minute_bin_limit = 20971520L
    last_minute_packets_limit = 2500L
    'max-batch-size' = 15
    'max-inactivity' = 10L
    'max-pause' = 10L
    'max-queue-size' = 10422
    'max-session-waiting-packets' = 100
    'max-wait' = 30L
    maxInactivityTime = 600000L
    'min-polling' = 10L
    'net-buffer' = 2048
    'net-buffer-limit' = 2097152
    'packet-delivery-retry-count' = 15
    pipelining = false
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 48
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    'send-node-hostname' = true
    'service-connected-timeout' = 60
    'sid-logger-level' = 'OFF'
    'socket-buffer-size' = 4096
    total_bin_limit = 0L
    total_packets_limit = 0L
    trafficThrottling = 'xmpp:2500:0:disc,bin:20m:0:disc'
    trusted = null
    'watchdog-delay' = 600000L
    'watchdog-ping-type' = WHITESPACE
    'watchdog-timeout' = 1740000L
    xmppLimitAction = DISCONNECT
    'client-trust-manager-factory' (class: tigase.server.xmppclient.ClientTrustManagerFactory) {
        clientCertCA = null
        clientCertRequired = false
    }
    commands {}
    connections (class: tigase.server.ConnectionManager$PortsConfigBean,
        exportable: true) {
        ports = [ 5280 ]
        5280 (class: tigase.server.ConnectionManager$PortConfigBean) {
            ifc = null
            'new-connections-throttling' = 1000L
            socket = plain
            type = accept
        }
    }
    'disco-extensions' {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    routingComputer (class: tigase.util.routing.RoutingsContainer$SingleMode) {}
    seeOtherHost (class: tigase.server.xmppclient.SeeOtherHost) {
        defaultHost = null
        phases = [
            OPEN
        ]
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'ephemeral-key-size' = 4096
        'hardened-mode' = secure
        'max-handshake-message-size' = 65536
        'tls-disable-tls13' = false
        'tls-disabled-ciphers' = null
        'tls-disabled-protocols' = null
        'tls-enabled-ciphers' = [
            'TLS_AES_256_GCM_SHA384',
            'TLS_AES_128_GCM_SHA256',
            'TLS_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA',
            'TLS_EMPTY_RENEGOTIATION_INFO_SCSV'
        ]
        'tls-enabled-protocols' = [ 'TLSv1.3', 'TLSv1.2' ]
        'tls-jdk-nss-bug-workaround-active' = false
    }
    'stream-error-counter' (class: tigase.server.xmppclient.StreamErrorCounterIOProcessor,
        active: false) {}
    'urn:xmpp:sm:3' (class: tigase.server.xmppclient.StreamManagementIOProcessor) {
        'ack-request-count' = 10
        'ack-request-min-delay' = 200L
        'ignore-undelivered-presence' = true
        'max-resumption-queue-size' = 2000
        'max-resumption-timeout' = 900
        'resumption-timeout' = 60
    }
}
c2s (class: tigase.server.xmppclient.ClientConnectionManager) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'c2s@618ef78a83fd'
    connectionDelay = 2000L
    'cross-domain-policy-file' = 'etc/cross-domain-policy.xml'
    defHostname = 618ef78a83fd
    'elements-number-limit' = 1000
    ifc = [ '*' ]
    last_minute_bin_limit = 20971520L
    last_minute_packets_limit = 2500L
    'max-queue-size' = 10422
    maxInactivityTime = 86400000L
    'net-buffer' = 2048
    'net-buffer-limit' = 2097152
    'packet-delivery-retry-count' = 15
    pipelining = false
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 48
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    'service-connected-timeout' = 60
    'socket-buffer-size' = 4096
    total_bin_limit = 0L
    total_packets_limit = 0L
    trafficThrottling = 'xmpp:2500:0:disc,bin:20m:0:disc'
    trusted = null
    'watchdog-delay' = 600000L
    'watchdog-ping-type' = WHITESPACE
    'watchdog-timeout' = 1740000L
    xmppLimitAction = DISCONNECT
    'client-trust-manager-factory' (class: tigase.server.xmppclient.ClientTrustManagerFactory) {
        clientCertCA = null
        clientCertRequired = false
    }
    commands {}
    connections (class: tigase.server.ConnectionManager$PortsConfigBean,
        exportable: true) {
        ports = [ 5222, 5223 ]
        5222 (class: tigase.server.ConnectionManager$PortConfigBean) {
            ifc = null
            'new-connections-throttling' = 200L
            socket = plain
            type = accept
        }
        5223 (class: tigase.server.ConnectionManager$SecPortConfigBean) {
            ifc = null
            'new-connections-throttling' = 50L
            socket = ssl
            type = accept
        }
    }
    'disco-extensions' {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    routingComputer (class: tigase.util.routing.RoutingsContainer$SingleMode) {}
    seeOtherHost (class: tigase.server.xmppclient.SeeOtherHost) {
        defaultHost = null
        phases = [
            OPEN
        ]
    }
    socket () {
        ssl = 'off'
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'ephemeral-key-size' = 4096
        'hardened-mode' = secure
        'max-handshake-message-size' = 65536
        'tls-disable-tls13' = false
        'tls-disabled-ciphers' = null
        'tls-disabled-protocols' = null
        'tls-enabled-ciphers' = [
            'TLS_AES_256_GCM_SHA384',
            'TLS_AES_128_GCM_SHA256',
            'TLS_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA',
            'TLS_EMPTY_RENEGOTIATION_INFO_SCSV'
        ]
        'tls-enabled-protocols' = [ 'TLSv1.3', 'TLSv1.2' ]
        'tls-jdk-nss-bug-workaround-active' = false
    }
    'stream-error-counter' (class: tigase.server.xmppclient.StreamErrorCounterIOProcessor,
        active: false) {}
    'urn:xmpp:sm:3' (class: tigase.server.xmppclient.StreamManagementIOProcessor) {
        'ack-request-count' = 10
        'ack-request-min-delay' = 200L
        'ignore-undelivered-presence' = true
        'max-resumption-queue-size' = 2000
        'max-resumption-timeout' = 900
        'resumption-timeout' = 60
    }
}
'certificate-container' (class: tigase.io.CertificateContainer,
    exportable: true) {
    removeRootCACertificate = true
    'sni-disable' = false
    'ssl-certs-location' = [ 'certs/' ]
    'ssl-def-cert-domain' = 'default'
    'trusted-certs-dir' = [ '/etc/ssl/certs' ]
    'custom-certificates' {}
    repository (class: tigase.io.repo.CertificateRepository,
        active: false) {
        'move-from-filesystem-to-repository' = true
        'repo-autoreload-interval' = 3600L
    }
}
classUtilBean (class: tigase.util.reflection.ClassUtilBean,
    exportable: true) {}
defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility,
    exportable: true) {}
defaultTypesConverter (class: tigase.kernel.DefaultTypesConverter,
    exportable: true) {}
eventBus (class: tigase.eventbus.impl.EventBusImplementation,
    exportable: true) {}
eventbus (class: tigase.eventbus.component.EventBusComponent) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'eventbus@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 12
    'processing-out-threads' = 12
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    affiliations (class: tigase.eventbus.component.stores.AffiliationStore) {
        allowedSubscribers = null
    }
    commands {}
    disco (class: tigase.eventbus.component.EventbusDiscoveryModule) {}
    'disco-extensions' {}
    eventBusRegistrar (class: tigase.eventbus.impl.EventsRegistrar) {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    'jabber:iq:version' (class: tigase.component.modules.impl.JabberVersionModule) {}
    localEventBus (class: tigase.eventbus.impl.EventBusImplementation) {}
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    publisher (class: tigase.eventbus.component.EventPublisherModule) {}
    receiver (class: tigase.eventbus.component.EventReceiverModule) {}
    responseManager (class: tigase.component.responses.ResponseManager) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    scriptEngineManager (class: javax.script.ScriptEngineManager) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    subscribe (class: tigase.eventbus.component.SubscribeModule) {}
    subscriptionStore (class: tigase.eventbus.component.stores.SubscriptionStore) {}
    unsubscribe (class: tigase.eventbus.component.UnsubscribeModule) {}
    'urn:xmpp:ping' (class: tigase.component.modules.impl.XmppPingModule) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
ext (class: tigase.server.ext.ComponentProtocol) {
    admins = [
        'admin@618ef78a83fd'
    ]
    'auth-timeout' = 15L
    'bind-ext-hostnames' = [  ]
    'close-on-seq-error' = true
    compId = 'ext@618ef78a83fd'
    connectionDelay = 2000L
    'cross-domain-policy-file' = 'etc/cross-domain-policy.xml'
    defHostname = 618ef78a83fd
    'elements-number-limit' = 1000
    experimental = false
    'identity-type' = 'generic'
    ifc = [ '*' ]
    last_minute_bin_limit = 419430400L
    last_minute_packets_limit = 51200L
    'max-auth-attempts' = 1
    'max-queue-size' = 10422
    maxInactivityTime = 86400000000L
    'net-buffer' = 65536
    'net-buffer-limit' = 20971520
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 48
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    'service-connected-timeout' = 60
    'socket-buffer-size' = 65536
    total_bin_limit = 0L
    total_packets_limit = 0L
    trafficThrottling = 'xmpp:50k:0:disc,bin:400m:0:disc'
    trusted = null
    'watchdog-delay' = 600000L
    'watchdog-ping-type' = WHITESPACE
    'watchdog-timeout' = 1740000L
    xmppLimitAction = DISCONNECT
    commands {}
    connections (class: tigase.server.ConnectionManager$PortsConfigBean,
        exportable: true) {
        ports = [  ]
    }
    'disco-extensions' {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    repository (class: tigase.server.ext.ServerCompDBRepository) {
        'external-components-group' = 'server-default-items-list'
        'repo-autoreload-interval' = 30L
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'ephemeral-key-size' = 4096
        'hardened-mode' = secure
        'max-handshake-message-size' = 65536
        'tls-disable-tls13' = false
        'tls-disabled-ciphers' = null
        'tls-disabled-protocols' = null
        'tls-enabled-ciphers' = [
            'TLS_AES_256_GCM_SHA384',
            'TLS_AES_128_GCM_SHA256',
            'TLS_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA',
            'TLS_EMPTY_RENEGOTIATION_INFO_SCSV'
        ]
        'tls-enabled-protocols' = [ 'TLSv1.3', 'TLSv1.2' ]
        'tls-jdk-nss-bug-workaround-active' = false
    }
}
'ext-disco' (class: tigase.server.extdisco.ExternalServiceDiscoveryComponent) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'ext-disco@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    commands {}
    disco (class: tigase.component.modules.impl.DiscoveryModule) {}
    'disco-extensions' {}
    extDiscoModule (class: tigase.server.extdisco.ExternalServiceDiscoveryModule) {}
    externalServiceDiscoveryRepository (class: tigase.server.extdisco.ExtServiceDiscoveryUserRepoRepository) {
        'repo-autoreload-interval' = 0L
    }
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
'ext-man' (class: tigase.server.ext.ComponentProtocolManager) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'ext-man@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    commands {}
    disco (class: tigase.component.modules.impl.DiscoveryModule) {}
    'disco-extensions' {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    repository (class: tigase.server.ext.ManagerCompDBRepository) {
        'external-components-group' = 'component-default-items-list'
        'repo-autoreload-interval' = 30L
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
http (class: tigase.http.HttpMessageReceiver) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'http@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    admin (class: tigase.http.modules.admin.AdminModule) {
        'admin-scripts-dir' = 'scripts/admin'
        'context-path' = '/admin'
        vhosts = null
        repository (class: tigase.http.modules.rest.ApiKeyRepository) {
            'open-access' = false
            'repo-autoreload-interval' = 0L
        }
    }
    commands {}
    'disco-extensions' {}
    'dns-webservice' (class: tigase.http.modules.dnswebservice.DnsWebServiceModule,
        active: false,
        exportable: true) {
        'context-path' = null
        vhosts = null
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        repository (class: tigase.http.modules.rest.ApiKeyRepository) {
            'open-access' = false
            'repo-autoreload-interval' = 0L
        }
    }
    'host-name-stats-collector' (class: tigase.http.stats.HostNameStatsCollector,
        active: false) {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    index (class: tigase.http.modules.IndexModule) {
        'context-path' = '/'
        vhosts = null
        repository (class: tigase.http.modules.rest.ApiKeyRepository) {
            'open-access' = false
            'repo-autoreload-interval' = 0L
        }
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    rest (class: tigase.http.modules.rest.RestModule) {
        'context-path' = '/rest'
        'rest-scripts-dir' = 'scripts/rest'
        vhosts = null
        'account-confirm' (class: tigase.rest.user.ConfirmAccountHandler) {}
        'password-reset-form' (class: rest.user.ResetPasswordFormHandler) {
            captchaRequired = true
        }
        'password-reset-token' (class: rest.user.ResetPasswordTokenHandler) {}
        'push-unregister-device' (class: tigase.rest.push.UnregisterDeviceHandler) {}
        repository (class: tigase.http.modules.rest.ApiKeyRepository) {
            'open-access' = false
            'repo-autoreload-interval' = 0L
        }
    }
    server (class: tigase.http.modules.server.ServerInfoModule) {
        'context-path' = '/server'
        vhosts = null
        repository (class: tigase.http.modules.rest.ApiKeyRepository) {
            'open-access' = false
            'repo-autoreload-interval' = 0L
        }
    }
    setup (class: tigase.http.modules.setup.SetupModule) {
        'admin-password' = '123456'
        'admin-user' = 'tigase_user'
        'context-path' = '/setup'
        vhosts = null
    }
    ui (class: tigase.http.modules.ui.UIModule) {
        'context-path' = '/ui'
        description = 'Web UI XMPP client and management utility'
        vhosts = null
        'war-path' = '/home/tigase/tigase-server-8.3.1-b12235/jars/tigase-web-ui.war'
        repository (class: tigase.http.modules.rest.ApiKeyRepository) {
            'open-access' = false
            'repo-autoreload-interval' = 0L
        }
    }
    'user-status-endpoint' (class: tigase.http.modules.UserStatusEndpointModule) {
        'context-path' = '/user-status-endpoint'
        vhosts = null
    }
    'well-known' (class: tigase.http.modules.wellknown.WellKnownModule) {
        'context-path' = '/well-known'
        hostname = null
        vhosts = null
        repository (class: tigase.http.modules.rest.ApiKeyRepository) {
            'open-access' = false
            'repo-autoreload-interval' = 0L
        }
    }
}
httpServer (class: tigase.http.java.JavaStandaloneHttpServer,
    exportable: true) {
    connections (class: tigase.http.java.JavaStandaloneHttpServer$PortsConfigBean,
        exportable: true) {
        ports = [ 8080 ]
        8080 (class: tigase.http.java.JavaStandaloneHttpServer$PortConfigBean) {
            domain = null
            redirectCondition = never
            redirectUri = null
            socket = plain
        }
    }
    executor (class: tigase.http.java.JavaStandaloneHttpServer$ExecutorWithTimeout,
        exportable: true) {
        'accept-timeout' = 2000
        'request-timeout' = 60000
        threads = 4
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'ephemeral-key-size' = 4096
        'hardened-mode' = secure
        'max-handshake-message-size' = 65536
        'tls-disable-tls13' = false
        'tls-disabled-ciphers' = null
        'tls-disabled-protocols' = null
        'tls-enabled-ciphers' = [
            'TLS_AES_256_GCM_SHA384',
            'TLS_AES_128_GCM_SHA256',
            'TLS_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA',
            'TLS_EMPTY_RENEGOTIATION_INFO_SCSV'
        ]
        'tls-enabled-protocols' = [ 'TLSv1.3', 'TLSv1.2' ]
        'tls-jdk-nss-bug-workaround-active' = false
    }
}
logging (class: tigase.conf.LoggingBean) {
    debug = [ 'server' ]
    'debug-packages' = null
    'packet-debug-full' = false
    rootHandlers = [ 'java.util.logging.ConsoleHandler', 'java.util.logging.FileHandler' ]
    rootLevel = CONFIG
    'shutdown-thread-dump' = true
    handlers {
        'java.util.logging.ConsoleHandler' {
            formatter = 'tigase.util.log.LogFormatter'
            level = INFO
        }
        'java.util.logging.FileHandler' {
            append = true
            count = 5
            formatter = 'tigase.util.log.LogFormatter'
            level = ALL
            limit = 10000000
            pattern = 'logs/tigase.log'
        }
    }
    loggers {
        tigase {
            useParentHandlers = true
        }
        'tigase.kernel.core.Kernel' {
            level = 'CONFIG'
        }
    }
}
mdns (class: MDnsComponent,
    active: false) {
    admins = [ 'admin@618ef78a83fd' ]
    compId = null
    defHostname = 618ef78a83fd
    'ignore-link-local' = true
    'scripts-dir' = 'scripts/admin'
    'server-host' = '618ef78a83fd'
    'server-name' = 'Tigase XMPP Server'
    'single-server' = false
    trusted = null
    commands {}
    defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    'disco-extensions' {}
}
'message-archive' (class: tigase.archive.MessageArchiveComponent) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'message-archive@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 48
    'remove-expired-messages' = false
    'remove-expired-messages-delay' = PT1H
    'remove-expired-messages-period' = PT24H
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    'tags-support' = false
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    archiving (class: tigase.archive.modules.ArchivingModule) {}
    commands {}
    disco (class: tigase.component.modules.impl.DiscoveryModule) {}
    'disco-extensions' {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    listCollections (class: tigase.archive.xep0136.modules.ListCollectionsModule) {}
    mamGetFormModule (class: tigase.xmpp.mam.modules.GetFormModule) {}
    mamItemHandler (class: tigase.archive.xep0313.MAMItemHandler) {}
    mamQueryModule (class: tigase.archive.xep0313.MAMQueryModule) {}
    mamQueryParser (class: tigase.archive.xep0313.MAMQueryParser) {}
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    queryTags (class: tigase.archive.xep0136.modules.QueryTagsModule) {}
    removeItems (class: tigase.archive.xep0136.modules.RemoveItemsModule) {}
    repositoryPool (class: tigase.archive.db.MessageArchiveRepositoryPool) {
        dataSourceSelection = List
        statistics = true
        aliases {}
        default (class: tigase.archive.db.MessageArchiveRepositoryPool$MessageArchiveRepositoryConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.archive.db.JDBCMessageArchiveRepository) {
                'add-message-query' = '{ call Tig_MA_AddMessage(?,?,?,?,?,?,?,?) }'
                'add-tag-to-message-query' = '{ call Tig_MA_AddTagToMessage(?,?,?) }'
                'delete-expired-messages-query' = '{ call Tig_MA_DeleteExpiredMessages(?,?) }'
                'get-collections-count-query' = '{ call Tig_MA_GetCollectionsCount(?,?,?,?,?,?) }'
                'get-collections-query' = '{ call Tig_MA_GetCollections(?,?,?,?,?,?,?,?) }'
                'get-message-position-query' = '{ call Tig_MA_GetMessagePosition(?,?,?,?,?,?,?,?) }'
                'get-message-query' = '{ call Tig_MA_GetMessage(?,?) }'
                'get-messages-count-query' = '{ call Tig_MA_GetMessagesCount(?,?,?,?,?,?,?) }'
                'get-messages-query' = '{ call Tig_MA_GetMessages(?,?,?,?,?,?,?,?,?) }'
                'get-tags-for-user-count-query' = '{ call Tig_MA_GetTagsForUserCount(?,?) }'
                'get-tags-for-user-query' = '{ call Tig_MA_GetTagsForUser(?,?,?,?) }'
                'remove-expired-messages-query-timeout' = 300
                'remove-messages-query' = '{ call Tig_MA_RemoveMessages(?,?,?,?) }'
                'store-plaintext-body' = true
            }
        }
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    retrieveItems (class: tigase.archive.xep0136.modules.RetrieveItemsModule) {}
    saveItems (class: tigase.archive.xep0136.modules.SaveItemsModule) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
    xep0136CollectionHandler (class: tigase.archive.xep0136.modules.ListCollectionsModule$Xep0136CollectionHandler) {}
    xep0136ItemHandler (class: tigase.archive.xep0136.modules.RetrieveItemsModule$Xep0136ItemHandler) {}
    xep0136QueryParser (class: tigase.archive.xep0136.Xep0136QueryParser) {}
}
'message-router' (class: tigase.server.MessageRouter) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'message-router@618ef78a83fd'
    defHostname = 618ef78a83fd
    'detailed-memory-statistics' = false
    disco_name = 'Tigase'
    disco_show_version = true
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    commands {}
    'disco-extensions' {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    'update-checker' (class: tigase.util.updater.UpdatesChecker) {
        admins = [
            'admin@618ef78a83fd'
        ]
        delay = PT168H
        notificationsEnabled = true
        period = PT168H
    }
}
mix (class: tigase.mix.MixComponent) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'mix@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 48
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    capsModule (class: tigase.pubsub.modules.CapsModule) {}
    channelCreateModule (class: tigase.mix.modules.ChannelCreateModule) {}
    channelDestroyModule (class: tigase.mix.modules.ChannelDestroyModule) {}
    channelGroupChatMessageModule (class: tigase.mix.modules.ChannelGroupChatMessageModule) {}
    channelJoinModule (class: tigase.mix.modules.ChannelJoinModule) {}
    channelLeaveModule (class: tigase.mix.modules.ChannelLeaveModule) {}
    channelRelayModule (class: tigase.mix.modules.ChannelRelayModule) {}
    channelSetNickModule (class: tigase.mix.modules.ChannelSetNickModule) {}
    channelUpdateSubscriptionkModule (class: tigase.mix.modules.ChannelUpdateSubscription) {}
    commands {}
    config (class: tigase.mix.MixConfig) {
        'pubsub-repository-cache-size' = 2000
    }
    dao (class: tigase.pubsub.repository.PubSubDAOPool) {
        dataSourceSelection = List
        mapComponentToBareDomain = false
        statistics = true
        aliases {}
        default (class: tigase.pubsub.repository.PubSubDAOPool$PubSubDAOConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.pubsub.repository.PubSubDAOJDBC) {
                'mam-add-item-query' = '{ call TigPubSubMamAddItem(?,?,?,?,?) }'
                'mam-query-item-position-query' = '{ call TigPubSubMamQueryItemPosition(?,?,?,?) }'
                'mam-query-item-query' = '{ call TigPubSubMamQueryItem(?,?) }'
                'mam-query-items-count-query' = '{ call TigPubSubMamQueryItemsCount(?,?,?) }'
                'mam-query-items-query' = '{ call TigPubSubMamQueryItems(?,?,?,?,?) }'
            }
        }
    }
    'default-config-adhoc' (class: tigase.pubsub.modules.commands.DefaultConfigCommand) {}
    defaultConfigModule (class: tigase.pubsub.modules.DefaultConfigModule) {}
    defaultNodeConfig (class: tigase.mix.model.DefaultNodeConfig) {}
    disco (class: tigase.mix.modules.DiscoveryModule) {
        allowDiscoitems = false
    }
    'disco-extensions' {}
    ghostbuster (class: tigase.pubsub.Ghostbuster) {
        batchSize = 1000
        delay = PT10M
        period = PT5M
        staleTime = PT1H
    }
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    'jabber:iq:version' (class: tigase.component.modules.impl.JabberVersionModule) {}
    loadTestCommand (class: tigase.pubsub.modules.commands.LoadTestCommand) {}
    logic (class: tigase.mix.model.DefaultMixLogic) {
        adhocChannelCreationAcl = DOMAIN
        publicChannelCreationAcl = DOMAIN_ADMIN
    }
    mamGetFormModule (class: tigase.xmpp.mam.modules.GetFormModule) {}
    mamItemHandler (class: tigase.mix.modules.mam.MAMItemHandler) {}
    mamQueryModule (class: tigase.mix.modules.mam.MAMQueryModule) {}
    mamQueryParser (class: tigase.mix.modules.mam.MAMQueryParser) {}
    manageAffiliationsModule (class: tigase.pubsub.modules.ManageAffiliationsModule) {}
    manageSubscriptionModule (class: tigase.pubsub.modules.ManageSubscriptionModule) {}
    mixRepository (class: tigase.mix.model.MixRepository) {}
    nodeConfigModule (class: tigase.pubsub.modules.NodeConfigModule) {}
    nodeCreateModule (class: tigase.pubsub.modules.NodeCreateModule) {}
    nodeDeleteModule (class: tigase.pubsub.modules.NodeDeleteModule) {}
    notificationBroadcaster (class: tigase.pubsub.NotificationBroadcaster) {}
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    packetHashCodeGenerator (class: tigase.mix.util.DefaultPacketHashCodeGenerator) {}
    pendingSubscriptionModule (class: tigase.pubsub.modules.PendingSubscriptionModule) {}
    presenceCollectorModule (class: tigase.pubsub.modules.PresenceCollectorModule) {}
    presenceNotifierModule (class: tigase.pubsub.modules.ext.presence.PresenceNotifierModule,
        active: false) {}
    presencePerNodeExtension (class: tigase.pubsub.modules.ext.presence.PresencePerNodeExtension,
        active: false) {}
    presenceRepository (class: tigase.pubsub.repository.PresenceCollectorRepository) {
        maximumNoOfResources = 20
    }
    publishExecutor (class: tigase.pubsub.utils.executors.RateLimitingExecutor,
        exportable: true) {
        criticalMemoryUsageLimit = 98.0f
        highMemoryUsageLimit = 90.0f
        limit = 60000L
    }
    publishItemModule (class: tigase.pubsub.modules.PublishItemModule) {}
    pubsubModulePredicate (class: tigase.mix.modules.PubSubModulePredicate) {}
    purgeItemsModule (class: tigase.pubsub.modules.PurgeItemsModule) {}
    readAllNodesCommand (class: tigase.pubsub.modules.commands.ReadAllNodesCommand) {}
    repository (class: tigase.pubsub.repository.cached.CachedPubSubRepository) {
        'delayed-root-collection-loading' = false
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    retractItemModule (class: tigase.pubsub.modules.RetractItemModule) {}
    retrieveAffiliationsModule (class: tigase.pubsub.modules.RetrieveAffiliationsModule) {}
    retrieveItemsCommand (class: tigase.pubsub.modules.commands.RetrieveItemsCommand) {}
    retrieveItemsModule (class: tigase.pubsub.modules.RetrieveItemsModule) {}
    retrieveSubscriptionsModule (class: tigase.pubsub.modules.RetrieveSubscriptionsModule) {}
    roomGhostbuster (class: tigase.mix.model.RoomGhostbuster) {
        delay = PT10M
        period = PT5M
    }
    roomPresenceModule (class: tigase.mix.modules.RoomPresenceModule) {}
    roomPresenceRepository (class: tigase.mix.model.RoomPresenceRepository) {}
    roomVCardModule (class: tigase.mix.modules.RoomVCardModule) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    subscribeNodeModule (class: tigase.pubsub.modules.SubscribeNodeModule) {}
    unsubscribeNodeModule (class: tigase.pubsub.modules.UnsubscribeNodeModule) {}
    'urn:xmpp:ping' (class: tigase.component.modules.impl.XmppPingModule) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
    xslTransformer (class: tigase.pubsub.modules.XsltTool) {}
}
monitor (class: tigase.monitor.MonitorComponent) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'monitor@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    TasksScriptRegistrar (class: tigase.monitor.TasksScriptRegistrar) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    bindings (class: javax.script.SimpleBindings) {}
    commands {}
    configItemRepository (class: tigase.monitor.TaskConfigItemJDBCRepository) {
        'repo-autoreload-interval' = 0L
    }
    'connections-task' (class: tigase.monitor.tasks.ConnectionsTask) {
        enabled = false
        period = 1000L
        threshold = 80
        thresholdMinimal = 10
    }
    'cpu-temp-task' (class: tigase.monitor.tasks.CpuTempTask) {
        cpuTempThreshold = 90
        enabled = false
        period = 10000L
    }
    disco (class: tigase.monitor.modules.DiscoveryMonitorModule) {}
    'disco-extensions' {}
    'disk-task' (class: tigase.monitor.tasks.DiskTask) {
        enabled = false
        period = 60000L
        threshold = 0.8f
    }
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    'jabber:iq:version' (class: tigase.component.modules.impl.JabberVersionModule) {}
    'load-checker-task' (class: tigase.monitor.tasks.LoadCheckerTask) {
        averageLoadThreshold = 10L
        enabled = false
        period = 1000L
    }
    'logger-task' (class: tigase.monitor.tasks.LoggerTask) {
        enabled = false
        levelTreshold = WARNING
        maxLogBuffer = 50000
        minimumIntervalInMinutes = 5
    }
    'memory-checker-task' (class: tigase.monitor.tasks.MemoryCheckerTask) {
        enabled = false
        maxHeapMemUsagePercentThreshold = 90
        maxNonHeapMemUsagePercentThreshold = 90
        period = 1000L
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    runtime (class: tigase.server.monitor.MonitorRuntime) {}
    'sample-task' (class: tigase.monitor.tasks.SampleTask) {
        enabled = false
        period = 1000L
    }
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    scriptEngineManager (class: javax.script.ScriptEngineManager) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    timerTaskService (class: tigase.monitor.MonitorComponent$1) {}
    'urn:xmpp:ping' (class: tigase.component.modules.impl.XmppPingModule) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
    'x-add-task' (class: tigase.monitor.modules.AddScriptTaskCommand) {}
    'x-add-timer-task' (class: tigase.monitor.modules.AddTimerScriptTaskCommand) {}
    'x-config' (class: tigase.monitor.modules.ConfigureTaskCommand) {}
    'x-delete-task' (class: tigase.monitor.modules.DeleteScriptTaskCommand) {}
    'x-info' (class: tigase.monitor.modules.InfoTaskCommand) {}
}
monitoring (class: tigase.management.MonitoringBean,
    exportable: true) {
    http (class: tigase.management.MonitoringBean$HttpMonitor,
        active: false) {
        configDir = 'etc'
        port = 0
    }
    jmx (class: tigase.management.MonitoringBean$JMXMonitor,
        active: false) {
        configDir = 'etc'
        port = 0
    }
    snmp (class: tigase.management.MonitoringBean$SnmpMonitor,
        active: false) {
        configDir = 'etc'
        port = 0
    }
}
msgRepository (class: tigase.server.amp.db.MsgRepository$MsgRepositoryMDBean,
    exportable: true) {
    dataSourceSelection = List
    statistics = true
    aliases {}
    default (class: tigase.server.amp.db.MsgRepository$MsgRepositoryMDBean$MsgRepositoryConfigBean) {
        'data-source' = null
        'repo-class' = null
        instance (class: tigase.server.amp.db.JDBCMsgRepository) {
            'add-message-query' = '{ call Tig_OfflineMessages_AddMessage(?,?,?,?,?,?,?) }'
            'count-messages-query' = '{ call Tig_OfflineMessages_GetMessagesCount(?) }'
            'delete-message-query' = '{ call Tig_OfflineMessages_DeleteMessage(?) }'
            'delete-messages-by-ids-query' = '{ call Tig_OfflineMessages_DeleteMessagesByIds(?,?,?,?,?) }'
            'delete-messages-query' = '{ call Tig_OfflineMessages_DeleteMessages(?) }'
            'get-expired-messages-before-query' = '{ call Tig_OfflineMessages_GetExpiredMessagesBefore(?) }'
            'get-expired-messages-query' = '{ call Tig_OfflineMessages_GetExpiredMessages(?) }'
            'get-messages-by-ids-query' = '{ call Tig_OfflineMessages_GetMessagesByIds(?,?,?,?,?) }'
            'get-messages-query' = '{ call Tig_OfflineMessages_GetMessages(?) }'
            'list-messages-query' = '{ call Tig_OfflineMessages_ListMessages(?) }'
            'store-limit' = 100L
            'user-store-limit-enable' = false
        }
    }
}
muc (class: tigase.muc.MUCComponent) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'muc@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 48
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    admin (class: tigase.muc.modules.ModeratorModule) {}
    commands {}
    default_room_config {}
    disco (class: tigase.muc.modules.DiscoveryModule) {}
    'disco-extensions' {}
    ghostbuster (class: tigase.muc.Ghostbuster2) {
        delay = PT10M
        period = PT5M
    }
    groupchat (class: tigase.muc.modules.GroupchatMessageModule) {}
    historyProviderPool (class: tigase.muc.history.HistoryProviderMDBean) {
        dataSourceSelection = List
        'map-component-to-bare-domain' = false
        statistics = true
        aliases {}
        default (class: tigase.muc.history.HistoryProviderMDBean$HistoryProviderConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.muc.history.JDBCHistoryProvider) {
                'add-message-query' = '{ call Tig_MUC_AddMessage(?,?,?,?,?,?,?) }'
                'delete-messages-query' = '{ call Tig_MUC_DeleteMessages(?) }'
                'get-messages-query' = '{ call Tig_MUC_GetMessages(?,?,?) }'
                'mam-get-message-position-query' = '{ call Tig_MUC_MAM_GetMessagePosition(?,?,?,?,?) }'
                'mam-get-messages-count-query' = '{ call Tig_MUC_MAM_GetMessagesCount(?,?,?,?) }'
                'mam-get-messages-query' = '{ call Tig_MUC_MAM_GetMessages(?,?,?,?,?,?) }'
            }
        }
    }
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    invitations (class: tigase.muc.modules.MediatedInvitationModule) {}
    iqforwarder (class: tigase.muc.modules.IqStanzaForwarderModule) {}
    'jabber:iq:version' (class: tigase.component.modules.impl.JabberVersionModule) {}
    mamGetFormModule (class: tigase.xmpp.mam.modules.GetFormModule) {}
    mamItemHandler (class: tigase.xmpp.mam.MAMItemHandler) {}
    mamQueryModule (class: tigase.muc.modules.MAMQueryModule) {}
    mamQueryParser (class: tigase.muc.modules.MAMQueryParser) {}
    'muc-dao' (class: tigase.muc.repository.MucDAOMDBean) {
        dataSourceSelection = List
        'map-component-to-bare-domain' = false
        statistics = true
        aliases {}
        default (class: tigase.muc.repository.MucDAOMDBean$MucDAOProviderConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.muc.repository.JDBCMucDAO) {}
        }
    }
    'muc-logger' (class: tigase.muc.logger.RoomChatLogger,
        active: false) {}
    mucConfig (class: tigase.muc.MUCConfig,
        exportable: true) {
        'ghostbuster-enabled' = true
        'hidden-room-creation-acl' = DOMAIN
        'legacy-delayed-delivery-enabled' = false
        'message-filter-enabled' = true
        'muc-add-id-to-message-if-missing' = true
        'muc-allow-chat-states' = false
        'muc-lock-new-room' = true
        'muc-multi-item-allowed' = true
        'muc-multi-item-forward-best' = true
        'persist-occupant-on-join' = false
        'presence-filter-enabled' = false
        'public-room-creation-acl' = DOMAIN_ADMIN
        'room-log-directory' = './logs/'
        'welcome-message' = true
    }
    mucRepository (class: tigase.muc.repository.inmemory.InMemoryMucRepository) {}
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    ownerModule (class: tigase.muc.modules.RoomConfigurationModule) {}
    permissionChecker (class: tigase.muc.PermissionChecker,
        exportable: true) {}
    presences (class: tigase.muc.modules.PresenceModuleImpl) {}
    privatemessages (class: tigase.muc.modules.PrivateMessageModule) {}
    register (class: tigase.muc.modules.RegisterModule) {}
    responseManager (class: tigase.component.responses.ResponseManager) {}
    roomFactory (class: tigase.muc.Room$RoomFactoryImpl,
        exportable: true) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    'self-pinger-monitor' (class: tigase.muc.modules.selfping.SelfPingerMonitor) {
        delay = PT1M
        period = PT1M
    }
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    unique (class: tigase.muc.modules.UniqueRoomNameModule) {}
    'urn:xmpp:ping' (class: tigase.muc.modules.selfping.SelfPingModule) {}
    vcard (class: tigase.muc.modules.VCardModule) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
nonAuthUserRepository (class: tigase.db.NonAuthUserRepositoryImpl,
    exportable: true) {
    'offline-user-autocreate' = false
}
pubsub (class: tigase.pubsub.PubSubComponent) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'pubsub@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 48
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = [ 'http@{clusterNode}' ]
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    capsModule (class: tigase.pubsub.modules.CapsModule) {}
    commands {}
    config (class: tigase.pubsub.PubSubConfig) {
        admins = [ 'admin@618ef78a83fd' ]
        'auto-subscribe-node-creator' = false
        'mam-enabled' = false
        'mam-enabled-for-generic-service' = false
        'pep-remove-empty-geoloc' = false
        'persistent-pep' = true
        'pubsub-high-memory-usage-level' = 90.0f
        'pubsub-low-memory-delay' = 1000L
        'pubsub-repository-cache-size' = 2000
        'send-last-published-item-on-presence' = true
        'subscribe-by-presence-filtered-notifications' = false
        'trust-every-entity' = false
    }
    dao (class: tigase.pubsub.repository.PubSubDAOPool) {
        dataSourceSelection = List
        mapComponentToBareDomain = false
        statistics = true
        aliases {}
        default (class: tigase.pubsub.repository.PubSubDAOPool$PubSubDAOConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.pubsub.repository.PubSubDAOJDBC) {
                'mam-add-item-query' = '{ call TigPubSubMamAddItem(?,?,?,?,?) }'
                'mam-query-item-position-query' = '{ call TigPubSubMamQueryItemPosition(?,?,?,?) }'
                'mam-query-item-query' = '{ call TigPubSubMamQueryItem(?,?) }'
                'mam-query-items-count-query' = '{ call TigPubSubMamQueryItemsCount(?,?,?) }'
                'mam-query-items-query' = '{ call TigPubSubMamQueryItems(?,?,?,?,?) }'
            }
        }
    }
    'default-config-adhoc' (class: tigase.pubsub.modules.commands.DefaultConfigCommand) {}
    defaultConfigModule (class: tigase.pubsub.modules.DefaultConfigModule) {}
    defaultNodeConfig (class: tigase.pubsub.DefaultNodeConfig) {}
    disco (class: tigase.pubsub.modules.DiscoveryModule) {}
    'disco-extensions' {}
    ghostbuster (class: tigase.pubsub.Ghostbuster) {
        batchSize = 1000
        delay = PT10M
        period = PT5M
        staleTime = PT1H
    }
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    'jabber:iq:version' (class: tigase.component.modules.impl.JabberVersionModule) {}
    loadTestCommand (class: tigase.pubsub.modules.commands.LoadTestCommand) {}
    logic (class: tigase.pubsub.utils.DefaultPubSubLogic) {}
    mamGetFormModule (class: tigase.xmpp.mam.modules.GetFormModule) {}
    mamItemHandler (class: tigase.pubsub.modules.mam.MAMItemHandler) {}
    mamQueryModule (class: tigase.pubsub.modules.mam.MAMQueryModule) {}
    mamQueryParser (class: tigase.pubsub.modules.mam.MAMQueryParser) {}
    manageAffiliationsModule (class: tigase.pubsub.modules.ManageAffiliationsModule) {}
    manageSubscriptionModule (class: tigase.pubsub.modules.ManageSubscriptionModule) {}
    nodeConfigModule (class: tigase.pubsub.modules.NodeConfigModule) {}
    nodeCreateModule (class: tigase.pubsub.modules.NodeCreateModule) {}
    nodeDeleteModule (class: tigase.pubsub.modules.NodeDeleteModule) {}
    notificationBroadcaster (class: tigase.pubsub.NotificationBroadcaster) {}
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    packetHashCodeGenerator (class: tigase.pubsub.DefaultPacketHashCodeGenerator) {}
    pendingSubscriptionModule (class: tigase.pubsub.modules.PendingSubscriptionModule) {}
    presenceCollectorModule (class: tigase.pubsub.modules.PresenceCollectorModule) {}
    presenceNotifierModule (class: tigase.pubsub.modules.ext.presence.PresenceNotifierModule,
        active: false) {}
    presencePerNodeExtension (class: tigase.pubsub.modules.ext.presence.PresencePerNodeExtension,
        active: false) {}
    presenceRepository (class: tigase.pubsub.repository.PresenceCollectorRepository) {
        maximumNoOfResources = 20
    }
    publishExecutor (class: tigase.pubsub.utils.executors.RateLimitingExecutor,
        exportable: true) {
        criticalMemoryUsageLimit = 98.0f
        highMemoryUsageLimit = 90.0f
        limit = 60000L
    }
    publishItemModule (class: tigase.pubsub.modules.PublishItemModule) {}
    purgeItemsModule (class: tigase.pubsub.modules.PurgeItemsModule) {}
    readAllNodesCommand (class: tigase.pubsub.modules.commands.ReadAllNodesCommand) {}
    repository (class: tigase.pubsub.repository.cached.CachedPubSubRepository) {
        'delayed-root-collection-loading' = false
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    retractItemModule (class: tigase.pubsub.modules.RetractItemModule) {}
    retrieveAffiliationsModule (class: tigase.pubsub.modules.RetrieveAffiliationsModule) {}
    retrieveItemsCommand (class: tigase.pubsub.modules.commands.RetrieveItemsCommand) {}
    retrieveItemsModule (class: tigase.pubsub.modules.RetrieveItemsModule) {}
    retrieveSubscriptionsModule (class: tigase.pubsub.modules.RetrieveSubscriptionsModule) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    subscribeNodeModule (class: tigase.pubsub.modules.SubscribeNodeModule) {}
    unsubscribeNodeModule (class: tigase.pubsub.modules.UnsubscribeNodeModule) {}
    'urn:xmpp:ping' (class: tigase.component.modules.impl.XmppPingModule) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
    xslTransformer (class: tigase.pubsub.modules.XsltTool) {}
}
'registration-throttling' (class: tigase.server.xmppclient.RegistrationThrottling,
    active: false,
    exportable: true) {
    limit = 4
    period = PT24H
}
rootSslContextContainer (class: tigase.io.SSLContextContainer$Root,
    exportable: true) {
    'ephemeral-key-size' = 4096
    'hardened-mode' = secure
    'max-handshake-message-size' = 65536
    'tls-disable-tls13' = false
    'tls-disabled-ciphers' = null
    'tls-disabled-protocols' = null
    'tls-enabled-ciphers' = null
    'tls-enabled-protocols' = null
    'tls-jdk-nss-bug-workaround-active' = false
}
rosterFactory (class: tigase.xmpp.impl.roster.RosterFactory$Bean,
    exportable: true) {
    'roster-implementation' = 'tigase.xmpp.impl.roster.RosterFlat'
}
s2s (class: tigase.server.xmppserver.S2SConnectionManager) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 's2s@618ef78a83fd'
    connectionDelay = 2000L
    'cross-domain-policy-file' = 'etc/cross-domain-policy.xml'
    defHostname = 618ef78a83fd
    'elements-number-limit' = 1000
    ifc = [ '*' ]
    last_minute_bin_limit = 419430400L
    last_minute_packets_limit = 51200L
    'max-queue-size' = 10422
    maxInactivityTime = 7200000L
    'net-buffer' = 65536
    'net-buffer-limit' = 20971520
    'one-way-authentication' = false
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 48
    'scheduler-threads' = 12
    'scripts-dir' = 'scripts/admin'
    'service-connected-timeout' = 60
    'socket-buffer-size' = 65536
    total_bin_limit = 0L
    total_packets_limit = 0L
    trafficThrottling = 'xmpp:50k:0:disc,bin:400m:0:disc'
    trusted = null
    'watchdog-delay' = 600000L
    'watchdog-ping-type' = WHITESPACE
    'watchdog-timeout' = 1740000L
    xmppLimitAction = DISCONNECT
    'authenticator-selector-manager' (class: tigase.server.xmppserver.proc.AuthenticatorSelectorManager) {}
    cidConnectionsOpenerService (class: tigase.server.xmppserver.CIDConnections$CIDConnectionsOpenerService) {
        outgoingOpenThreads = 12
    }
    commands {}
    connections (class: tigase.server.ConnectionManager$PortsConfigBean,
        exportable: true) {
        ports = [ 5269 ]
        5269 (class: tigase.server.ConnectionManager$PortConfigBean) {
            ifc = null
            'new-connections-throttling' = 100L
            socket = plain
            type = accept
        }
    }
    dialback (class: tigase.server.xmppserver.proc.Dialback) {
        authenticationTimeOut = 30L
        'ejabberd-bug-workaround' = true
        'skip-tls-hostnames' = null
    }
    'disco-extensions' {}
    domainServerNameMapper (class: tigase.server.xmppserver.S2SConnectionManager$DomainServerNameMapper) {
        entries {}
    }
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    packetChecker (class: tigase.server.xmppserver.proc.PacketChecker) {
        allowOtherDomainsWithSameIp = false
        allowedOtherDomainsWithSameIpWhitelist = null
        allowedOtherDomainsMap {}
    }
    s2sRandomSelector (class: tigase.server.xmppserver.S2SRandomSelector) {}
    'sasl-external' (class: tigase.server.xmppserver.proc.SaslExternal) {
        authenticationTimeOut = 30L
        'legacy-compat' = true
        'skip-for-domains' = null
        'skip-tls-hostnames' = null
    }
    socket () {
        ssl = 'off'
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'ephemeral-key-size' = 4096
        'hardened-mode' = secure
        'max-handshake-message-size' = 65536
        'tls-disable-tls13' = false
        'tls-disabled-ciphers' = null
        'tls-disabled-protocols' = null
        'tls-enabled-ciphers' = [
            'TLS_AES_256_GCM_SHA384',
            'TLS_AES_128_GCM_SHA256',
            'TLS_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA',
            'TLS_EMPTY_RENEGOTIATION_INFO_SCSV'
        ]
        'tls-enabled-protocols' = [ 'TLSv1.3', 'TLSv1.2' ]
        'tls-jdk-nss-bug-workaround-active' = false
    }
    startTLS (class: tigase.server.xmppserver.proc.StartTLS) {
        'skip-tls-hostnames' = null
    }
    startZlib (class: tigase.server.xmppserver.proc.StartZlib) {
        'skip-tls-hostnames' = null
    }
    streamError (class: tigase.server.xmppserver.proc.StreamError) {
        'skip-tls-hostnames' = null
    }
    streamFeatures (class: tigase.server.xmppserver.proc.StreamFeatures) {
        'skip-tls-hostnames' = null
    }
    streamOpen (class: tigase.server.xmppserver.proc.StreamOpen) {
        'skip-tls-hostnames' = null
    }
}
'sess-man' (class: tigase.server.xmppsession.SessionManager,
    exportable: true) {
    'active-user-timeframe' = 300000L
    admins = [
        'admin@618ef78a83fd'
    ]
    'auth-timeout' = 120L
    compId = 'sess-man@618ef78a83fd'
    connectionCheckPeriod = 30000L
    defHostname = 618ef78a83fd
    includeCapsInStream = true
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 96
    'processing-out-threads' = 96
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    'skip-privacy' = false
    'sm-threads-factor' = 1
    'sm-threads-pool' = 'default'
    'stale-connection-closer-queue-size' = true
    trusted = null
    'user-connections-limit' = null
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    adHocCommandModule (class: tigase.component.modules.impl.AdHocCommandModule) {}
    'addressing-sanitizer' (class: tigase.xmpp.impl.AddressingSanitizer) {
        queueSize = null
        threadsNo = 1
    }
    amp (class: tigase.xmpp.impl.MessageAmp,
        exportable: true) {
        'amp-jid' = 'amp@618ef78a83fd'
        queueSize = null
        'quota-exceeded' = error
        threadsNo = 1
        msgoffline (class: tigase.xmpp.impl.OfflineMessages) {
            'msg-repo-class' = null
            'msg-store-offline-paths' = [  ]
            queueSize = null
            threadsNo = 1
        }
    }
    'auth-credentials-add' (class: tigase.auth.adhoc.AddUserCredentials) {}
    'auth-credentials-delete' (class: tigase.auth.adhoc.DeleteUserCredentials) {}
    'auth-credentials-list' (class: tigase.auth.adhoc.ShowUserCredentials) {}
    'brute-force-locker' (class: tigase.auth.BruteForceLockerBean) {
        detailedStatistics = false
    }
    commands {}
    'default-handler' (class: tigase.server.xmppsession.SessionManager$DefaultHandlerProc) {
        queueSize = null
        threadsNo = 48
    }
    disco (class: tigase.xmpp.impl.ServiceDiscovery) {
        queueSize = null
        threadsNo = 1
    }
    'disco-extensions' {}
    'domain-filter' (class: tigase.xmpp.impl.DomainFilter) {
        queueSize = null
        threadsNo = 1
    }
    'dynamic-rosters' (class: tigase.xmpp.impl.roster.DynamicRoster,
        active: false) {
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    }
    'error-counter' (class: tigase.xmpp.impl.ErrorCounter,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    'http://jabber.org/protocol/commands' (class: tigase.xmpp.impl.JabberIqCommand) {
        queueSize = null
        threadsNo = 1
    }
    'http://jabber.org/protocol/jingle' (class: tigase.xmpp.impl.Jingle,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    'http://jabber.org/protocol/offline' (class: tigase.xmpp.impl.FlexibleOfflineMessageRetrieval,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    'http://jabber.org/protocol/stats' (class: tigase.xmpp.impl.JabberIqStats,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    'invisible-command' (class: tigase.xmpp.impl.InvisibleCommand,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    'jabber:iq:auth' (class: tigase.xmpp.impl.JabberIqAuth) {
        'allow-unauthorized' = [
            '[urn:ietf:params:xml:ns:xmpp-tls]',
            '[http://jabber.org/protocol/compress]',
            '[urn:ietf:params:xml:ns:xmpp-sasl]',
            '[urn:xmpp:sasl:2]',
            '/iq/query[jabber:iq:register]',
            '/iq/query[jabber:iq:auth]'
        ]
        queueSize = null
        threadsNo = 1
    }
    'jabber:iq:iq' (class: tigase.xmpp.impl.JabberIqIq,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    'jabber:iq:last-marker' (class: tigase.xmpp.impl.LastActivityMarker) {
        message = false
        persistAllToRepository = true
        presence = true
        queueSize = null
        threadsNo = 1
        'jabber:iq:last' (class: tigase.xmpp.impl.LastActivity) {
            'protection-level' = ALL
            queueSize = null
            threadsNo = 1
        }
    }
    'jabber:iq:privacy' (class: tigase.xmpp.impl.JabberIqPrivacy) {
        queueSize = null
        threadsNo = 1
        privacyListOfflineCache (class: tigase.xmpp.impl.JabberIqPrivacy$PrivacyListOfflineCache,
            active: false) {
            size = 10000
        }
    }
    'jabber:iq:private' (class: tigase.xmpp.impl.JabberIqPrivate) {
        queueSize = null
        threadsNo = 1
    }
    'jabber:iq:register' (class: tigase.xmpp.impl.JabberIqRegister) {
        captchaRequired = false
        emailRequired = true
        instruction = 'Please provide the following information to sign up for an account'
        instructionEmailRequired = 'Please provide the following information to sign up for an account

Please also provide your e-mail address (must be valid!) to which we will send confirmation link.'
        maxCaptchaRepetition = 3
        'oauth-consumer-key' = null
        'oauth-consumer-secret' = null
        queueSize = null
        'registration-blacklist' = [  ]
        'registration-whitelist' = [  ]
        'registrations-per-second' = 100000L
        'signed-form-required' = false
        threadsNo = 1
        'whitelist-registration-only' = false
        CaptchaProvider (class: tigase.xmpp.impl.CaptchaProvider) {}
        tokenBucketPool (class: tigase.xmpp.impl.TokenBucketPool) {}
    }
    'jabber:iq:roster' (class: tigase.xmpp.impl.JabberIqRoster) {
        'auto-authorize' = false
        empty_name_enabled = false
        max_roster_size = 16676
        queueSize = null
        threadsNo = 4
    }
    'jabber:iq:version' (class: tigase.xmpp.impl.JabberIqVersion) {
        queueSize = null
        threadsNo = 1
    }
    listKnownSpammers (class: tigase.spam.adhocs.ListKnownSpammers) {}
    message (class: tigase.xmpp.impl.Message,
        active: false,
        exportable: true) {
        queueSize = null
        threadsNo = 1
    }
    'message-all' (class: tigase.xmpp.impl.MessageAll,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    'message-archive' (class: tigase.archive.processors.MessageArchivePlugin,
        exportable: true) {
        'component-jid' = 'message-archive@618ef78a83fd'
        'default-store-method' = message
        'ignore-pubsub-events-full-jid' = true
        'msg-archive-paths' = [
            '-/message/result[urn:xmpp:mam:1]',
            '-/message/result[urn:xmpp:mam:2]',
            '-/message/*[urn:xmpp:carbons:2]',
            '-/message/no-store[urn:xmpp:hints]',
            '/message/body',
            '/message/store[urn:xmpp:hints]',
            '-/message[type=headline]',
            '-/message/*[http://jabber.org/protocol/chatstates]',
            '/message'
        ]
        queueSize = null
        'required-store-method' = false
        size = 10000
        'store-mix-messages' = true
        'store-muc-messages' = user
        threadsNo = 1
    }
    'message-archive-xep-0136' (class: tigase.archive.processors.Xep0136MessageArchivingProcessor,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    'message-carbons' (class: tigase.xmpp.impl.MessageCarbons) {
        'msg-carbons-paths' = [
            '/message/body',
            '/message/received[urn:xmpp:receipts]',
            '/message/*[urn:xmpp:chat-markers:0]',
            '/message/*[http://jabber.org/protocol/chatstates]',
            '/message/x[jabber:x:conference]',
            '/message/x/invite'
        ]
        queueSize = null
        threadsNo = 1
    }
    'message-delivery-logic' (class: tigase.xmpp.impl.MessageDeliveryLogic,
        exportable: true) {
        'delivery-rules' = inteligent
        'silently-ignore-message' = false
    }
    'message-vhost-forward' (class: tigase.xmpp.impl.MessageForwarding,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    mobile_v1 (class: tigase.xmpp.impl.MobileV1,
        active: false) {
        'max-queue-size' = 50
        'max-timeout' = 360000L
        queueSize = null
        threadsNo = 1
    }
    mobile_v2 (class: tigase.xmpp.impl.MobileV2,
        active: false) {
        'max-queue-size' = 50
        queueSize = null
        threadsNo = 1
    }
    mobile_v3 (class: tigase.xmpp.impl.MobileV3,
        active: false) {
        'max-queue-size' = 50
        queueSize = null
        threadsNo = 1
    }
    motd (class: tigase.xmpp.impl.MotdProcessor) {
        queueSize = null
        threadsNo = 1
    }
    'msg-offline-pubsub-publisher-notifier' (class: tigase.xmpp.impl.OfflineMessages$PubSubPublisherNotifier,
        active: false,
        exportable: true) {
        'msg-pubsub-jid' = null
        'msg-pubsub-node' = null
        'msg-pubsub-publisher' = null
    }
    msgoffline (class: tigase.xmpp.impl.OfflineMessages,
        active: false) {
        'msg-repo-class' = null
        'msg-store-offline-paths' = [  ]
        queueSize = null
        threadsNo = 1
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    pep (class: tigase.pubsub.PepPlugin) {
        'pubsub-jid' = 'pubsub@618ef78a83fd'
        queueSize = null
        'simple-pep-enabled' = false
        threadsNo = 2
    }
    'pep-simple' (class: tigase.xmpp.impl.PepPlugin,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    'presence-offline' (class: tigase.xmpp.impl.PresenceOffline,
        active: false) {
        'cache-size' = 1000
        'delay-stamp' = true
        'probe-full-jid' = false
        queueSize = null
        'skip-offline' = false
        'skip-offline-sys' = true
        threadsNo = 4
    }
    'presence-state' (class: tigase.xmpp.impl.PresenceState) {
        'enable-roster-lazy-loading' = true
        'offline-roster-last-seen' = null
        'presence-global-forward' = null
        'probe-full-jid' = false
        queueSize = null
        'skip-offline' = false
        'skip-offline-sys' = true
        threadsNo = 4
    }
    'presence-subscription' (class: tigase.xmpp.impl.PresenceSubscription) {
        'auto-authorize' = false
        'probe-full-jid' = false
        queueSize = null
        'skip-offline' = false
        'skip-offline-sys' = true
        threadsNo = 4
    }
    'remote-roster-management' (class: tigase.xmpp.impl.RemoteRosterManagement,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    'sasl-provider' (class: tigase.auth.TigaseSaslProvider) {
        'callback-handler-factory' (class: tigase.auth.CallbackHandlerFactory) {}
        'mechanism-selector' (class: tigase.auth.DefaultMechanismSelector) {
            'allowed-mechanisms' = [  ]
            disableScramPlus = false
            'non-plain-password-allowed-mechanisms' = [ 'PLAIN', 'ANONYMOUS', 'EXTERNAL' ]
        }
        tigaseSaslServerFactory (class: tigase.auth.mechanisms.TigaseSaslServerFactory) {}
    }
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    'session-close' (class: tigase.server.xmppsession.SessionManager$SessionCloseProc) {
        queueSize = null
        threadsNo = 4
    }
    'session-open' (class: tigase.server.xmppsession.SessionManager$SessionOpenProc) {
        queueSize = null
        threadsNo = 2
    }
    'spam-filter' (class: tigase.spam.SpamProcessor) {
        queueSize = null
        'return-error' = false
        threadsNo = 1
        'known-spammers' (class: tigase.spam.filters.KnownSpammersFilter) {
            'ban-time' = 15L
            'cache-time' = 10080L
            'print-spammers' = false
            'print-spammers-frequency' = 1440L
            reportedSpammerProbability = 0.1
        }
        'message-error-ensure-error-child' (class: tigase.spam.filters.MessageErrorFilterEnsureErrorChild) {}
        'message-same-long-body' (class: tigase.spam.filters.MessageFilterSameLongBody) {
            'body-size' = 100
            'counter-size-limit' = 10000
            'number-limit' = 20
            'skip-check-rules' = [
                /message/fallback[urn:xmpp:fallback:0],
                /message/encrypted[eu.siacs.conversations.axolotl],
                /message/openpgp[urn:xmpp:openpgp:0],
                /message/encrypted[urn:xmpp:omemo:1]
            ]
            'skip-otr-check' = true
        }
        'muc-message-ensure-to-full-jid' (class: tigase.spam.filters.MucMessageFilterEnsureToFullJid,
            active: false) {}
        'presence-subscribe' (class: tigase.spam.filters.PresenceSubscribeFilter) {
            'limit-per-minute' = 5
        }
        'presence-subscribe-outgoing' (class: tigase.spam.filters.PresenceSubscribeOutgoingFilter,
            active: false) {
            numberOfAllowedRequestsPerMinute = 5
        }
    }
    starttls (class: tigase.xmpp.impl.StartTLS,
        active: false) {
        queueSize = null
        threadsNo = 1
    }
    'urn:ietf:params:xml:ns:xmpp-bind' (class: tigase.xmpp.impl.BindResource) {
        'def-resource-prefix' = 'tigase-'
        queueSize = null
        threadsNo = 1
    }
    'urn:ietf:params:xml:ns:xmpp-sasl' (class: tigase.xmpp.impl.SaslAuth) {
        'allow-unauthorized' = [
            '[urn:ietf:params:xml:ns:xmpp-tls]',
            '[http://jabber.org/protocol/compress]',
            '[urn:ietf:params:xml:ns:xmpp-sasl]',
            '[urn:xmpp:sasl:2]',
            '/iq/query[jabber:iq:register]',
            '/iq/query[jabber:iq:auth]'
        ]
        queueSize = null
        threadsNo = 4
    }
    'urn:ietf:params:xml:ns:xmpp-session' (class: tigase.xmpp.impl.SessionBind) {
        queueSize = null
        threadsNo = 1
    }
    'urn:xmpp:bind:0' (class: tigase.xmpp.impl.Bind2) {}
    'urn:xmpp:blocking' (class: tigase.xmpp.impl.BlockingCommand) {
        queueSize = null
        threadsNo = 1
    }
    'urn:xmpp:csi:0' (class: tigase.xmpp.impl.ClientStateIndication) {
        queueSize = null
        threadsNo = 1
        logic (class: tigase.xmpp.impl.MobileV2) {
            'max-queue-size' = 50
            queueSize = null
            threadsNo = 1
        }
    }
    'urn:xmpp:extdisco:2' (class: tigase.server.extdisco.ExternalServiceDiscoveryProcessor) {
        'ext-service-disco-jid' = 'ext-disco@618ef78a83fd'
        queueSize = null
        threadsNo = 1
    }
    'urn:xmpp:mam:1' (class: tigase.archive.processors.Xep0313MessageArchiveManagementProcessor) {
        queueSize = null
        threadsNo = 1
    }
    'urn:xmpp:mam:2' (class: tigase.archive.processors.MAM2Processor) {
        mam2exteded = true
        queueSize = null
        threadsNo = 1
    }
    'urn:xmpp:mix:pam:2' (class: tigase.xmpp.impl.MIXProcessor) {
        queueSize = null
        threadsNo = 1
    }
    'urn:xmpp:ping' (class: tigase.xmpp.impl.UrnXmppPing) {
        queueSize = null
        threadsNo = 1
    }
    'urn:xmpp:push:0' (class: tigase.xmpp.impl.push.PushNotifications,
        exportable: true) {
        'encrypted-message-body' = 'New secure message. Open to see the message.'
        'max-timeout' = PT6M
        queueSize = null
        threadsNo = 1
        'with-body' = true
        'with-sender' = true
        away (class: tigase.xmpp.impl.push.AwayPushNotificationsExtension,
            active: false) {}
        encrypted (class: tigase.xmpp.impl.push.EncryptedPushNotificationExtension) {
            'encrypted-message-body' = 'New secure message. Open to see the message.'
        }
        groupchat (class: tigase.xmpp.impl.push.GroupchatPushNotificationsExtension) {}
        'groupchat-filter' (class: tigase.xmpp.impl.push.GroupchatFilter) {}
        'ignore-from-unknown' (class: tigase.xmpp.impl.push.IgnoreFromUnknownFilter) {}
        jingle (class: tigase.xmpp.impl.push.JinglePushNotificationsExtension) {}
        'muted-filter' (class: tigase.xmpp.impl.push.MutedFilter) {}
        priority (class: tigase.xmpp.impl.push.PriorityExtension) {}
    }
    'urn:xmpp:sasl:2' (class: tigase.xmpp.impl.SaslAuth2) {
        'allow-unauthorized' = [
            '[urn:ietf:params:xml:ns:xmpp-tls]',
            '[http://jabber.org/protocol/compress]',
            '[urn:ietf:params:xml:ns:xmpp-sasl]',
            '[urn:xmpp:sasl:2]',
            '/iq/query[jabber:iq:register]',
            '/iq/query[jabber:iq:auth]'
        ]
        queueSize = null
        threadsNo = 4
    }
    'urn:xmpp:sm:3' (class: tigase.xmpp.impl.StreamManagementInline) {}
    'urn:xmpp:time' (class: tigase.xmpp.impl.EntityTime) {
        queueSize = null
        threadsNo = 1
    }
    'vcard-temp' (class: tigase.xmpp.impl.VCardTemp) {
        queueSize = null
        threadsNo = 1
    }
    'vcard-xep-0292' (class: tigase.xmpp.impl.VCard4) {
        queueSize = null
        threadsNo = 1
    }
    writer (class: tigase.server.xmppsession.SessionManager$SMPacketWriter,
        exportable: true) {}
    zlib (class: tigase.xmpp.impl.StartZLib) {
        queueSize = null
        threadsNo = 1
    }
}
socks5 (class: tigase.socks5.Socks5ProxyComponent,
    active: false) {
    admins = [ 'admin@618ef78a83fd' ]
    compId = null
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'net-buffer' = 2048
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'remote-addresses' = null
    'scheduler-threads' = 1
    'scripts-dir' = 'scripts/admin'
    trusted = null
    commands {}
    connections (class: tigase.socks5.AbstractConnectionManager$PortsConfigBean) {
        ports = null
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    }
    defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    'disco-extensions' {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    repository (class: tigase.socks5.repository.Socks5RepositoryMDBean) {
        dataSourceSelection = List
        statistics = true
        aliases {}
        default (class: tigase.socks5.repository.Socks5RepositoryMDBean$Socks5RepositoryConfigBean) {
            'data-source' = null
            'repo-class' = null
            defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        }
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    }
    verifier (class: tigase.socks5.verifiers.DummyVerifier) {}
}
'stanza-source-checker' (class: tigase.server.StanzaSourceChecker,
    exportable: true) {}
stats (class: tigase.stats.StatisticsCollector) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'stats@618ef78a83fd'
    defHostname = 618ef78a83fd
    'scripts-dir' = 'scripts/admin'
    'stats-high-memory-level' = 95
    'stats-history-size' = 0
    'stats-update-interval' = 10L
    trusted = null
    commands {}
    'counter-data-logger' (class: tigase.stats.CounterDataLogger,
        active: false) {
        frequency = -1L
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        repository (class: tigase.stats.db.CounterDataLoggerRepoBean) {
            dataSourceSelection = List
            statistics = true
            aliases {}
            default (class: tigase.stats.db.CounterDataLoggerRepoBean$CounterDataLoggerConfigBean) {
                'data-source' = null
                'repo-class' = null
                defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
            }
            defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        }
    }
    'disco-extensions' {}
}
'status-report-generator' (class: tigase.server.monitor.StatusReportGenerator) {
    reportGeneratorEnabled = true
}
test (class: tigase.server.test.TestComponent,
    active: false) {
    admins = [ 'admin@618ef78a83fd' ]
    compId = null
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 12
    'processing-out-threads' = 12
    'scheduler-threads' = 1
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    commands {}
    defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    disco (class: tigase.component.modules.impl.DiscoveryModule) {}
    'disco-extensions' {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    'test-generator-module' (class: tigase.server.test.TestGeneratorModule) {}
    'test-spam-module' (class: tigase.server.test.TestSpamModule) {
        'abuse-address' = 'abuse@locahost'
        'bad-words' = [ 'word1', 'word2', 'word3' ]
        'log-prepend' = 'Spam detected: '
        'notification-frequency' = 10
        'packet-types' = [ 'message', 'presence', 'iq' ]
        'secure-logging' = false
        'white-list' = [ 'admin@localhost' ]
    }
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
upload (class: tigase.http.upload.FileUploadComponent) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'upload@618ef78a83fd'
    defHostname = 618ef78a83fd
    'max-queue-size' = 10422
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    commands {}
    'delete-slot-command' (class: tigase.http.upload.commands.DeleteFileCommandUser) {}
    'delete-slot-command-admin' (class: tigase.http.upload.commands.DeleteFileCommandAdmin) {}
    disco (class: tigase.http.upload.DiscoveryModule) {}
    'disco-extensions' {}
    expiration (class: tigase.http.upload.ExpirationTask) {
        delay = PT0S
        'expiration-time' = PT720H
        limit = 10000
        period = PT24H
    }
    httpModule (class: tigase.http.upload.HttpModule) {
        'context-path' = '/upload'
        vhosts = null
        fileServletContext (class: tigase.http.upload.FileServlet$FileServletContext) {}
    }
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    logic (class: tigase.http.upload.logic.DefaultLogic,
        exportable: true) {
        'download-uri-format' = '{proto}://{serverName}:{port}/upload/{slotId}/{filename}'
        expiration = PT720H
        'expiration-period' = PT0S
        'local-only' = true
        'max-file-size' = 20971520L
        port = null
        protocol = null
        'server-name' = '618ef78a83fd'
        'upload-uri-format' = '{proto}://{serverName}:{port}/upload/{userJid}/{slotId}/{filename}'
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    'query-files-command' (class: tigase.http.upload.commands.QueryFilesCommandUser) {}
    'query-files-command-admin' (class: tigase.http.upload.commands.QueryFilesCommandAdmin) {}
    'query-space-used-command' (class: tigase.http.upload.commands.QueryUsedSpaceCommandUser) {}
    'query-space-used-command-admin' (class: tigase.http.upload.commands.QueryUsedSpaceCommandAdmin) {}
    'query-space-used-command-domain' (class: tigase.http.upload.commands.QueryUsedSpaceCommandDomain) {}
    repositoryPool (class: tigase.http.upload.db.FileUploadRepositoryPool,
        exportable: true) {
        dataSourceSelection = List
        aliases {}
        default (class: tigase.http.upload.db.FileUploadRepositoryPool$FileUploadRepositoryConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.http.upload.db.JDBCFileUploadRepository) {
                'allocate-slot-query' = '{ call Tig_HFU_AllocateSlot(?, ?, ?, ?, ?, ?, ?) }'
                'count-space-used-domain-query' = '{ call Tig_HFU_UsedSpaceCountForDomain(?) }'
                'count-space-used-user-query' = '{ call Tig_HFU_UsedSpaceCountForUser(?) }'
                'get-slot-query' = '{ call Tig_HFU_GetSlot(?) }'
                'list-domain-slots-query' = '{ call Tig_HFU_DomainSlotsQuery(?,?,?) }'
                'list-expired-slots-query' = '{ call Tig_HFU_ListExpiredSlots(?,?,?) }'
                'list-user-slots-query' = '{ call Tig_HFU_UserSlotsQuery(?,?,?) }'
                'remove-expired-slots-query' = '{ call Tig_HFU_RemoveExpiredSlots(?,?,?) }'
                'remove-slot-query' = '{ call Tig_HFU_RemoveSlot(?) }'
                'update-slot-query' = '{ call Tig_HFU_UpdateSlot(?) }'
            }
        }
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    slotRequestModule (class: tigase.http.upload.SlotRequestModule) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    store (class: tigase.http.upload.store.DirectoryStore,
        exportable: true) {
        'group-by-user' = false
        path = 'data/upload'
    }
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
'vhost-man' (class: tigase.vhosts.VHostManager,
    exportable: true) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'vhost-man@618ef78a83fd'
    defHostname = 618ef78a83fd
    'scripts-dir' = 'scripts/admin'
    trusted = null
    'brute-force-locker' (class: tigase.auth.BruteForceLockerBean$BruteForceLockerVHostExtensionProvider) {}
    'client-trust-extension' (class: tigase.server.xmppclient.ClientTrustManagerFactory$ClientTrustVHostItemExtensionProvider) {}
    commands {}
    defaults (class: tigase.vhosts.VHostItemDefaults,
        exportable: true) {
        'domain-filter-policy' = null
        'hardened-mode' = 'secure'
        's2s-secret' = null
        trusted = null
        'vhost-anonymous-enabled' = true
        'vhost-disable-dns-check' = false
        'vhost-max-users' = 0L
        'vhost-message-forward-jid' = null
        'vhost-presence-forward-jid' = null
        'vhost-register-enabled' = true
        'vhost-tls-required' = true
    }
    'disco-extensions' {}
    'disco-server-info' (class: tigase.server.BasicComponent$ServerInfoVHostItemExtension$ServerInfoVHostItemExtensionProvider) {}
    'extension-manager' (class: tigase.vhosts.VHostItemExtensionManager,
        exportable: true) {}
    'hardened-mode' (class: tigase.io.SSLContextContainer$HardenedModeVHostItemExtensionProvider) {}
    'message-archive' (class: tigase.archive.MessageArchiveVHostItemExtension$Provider) {}
    'presence-subscription' (class: tigase.xmpp.impl.PresenceSubscription$PresenceSubscriptionVHostItemExtensionProvider) {}
    'see-other-host' (class: tigase.server.xmppclient.SeeOtherHost$SeeOtherHostVHostItemExtensionProvider) {}
    vhostRepository (class: tigase.vhosts.VHostManager$DefVHostRepositoryBean) {
        'data-source' = 'default'
        'repo-class' = null
        instance (class: tigase.vhosts.VHostJDBCRepository) {
            'default-virtual-host' = '618ef78a83fd'
            'dns-def-ip' = '172.28.0.5'
            'dns-srv-def-addr' = '618ef78a83fd'
            'domains-per-user-limit' = 25
            'installation-dns-address' = null
            'repo-autoreload-interval' = 60L
        }
    }
}
ws2s (class: tigase.server.websocket.WebSocketClientConnectionManager) {
    admins = [
        'admin@618ef78a83fd'
    ]
    compId = 'ws2s@618ef78a83fd'
    connectionDelay = 2000L
    'cross-domain-policy-file' = 'etc/cross-domain-policy.xml'
    defHostname = 618ef78a83fd
    'elements-number-limit' = 1000
    ifc = [ '*' ]
    last_minute_bin_limit = 20971520L
    last_minute_packets_limit = 2500L
    'max-queue-size' = 10422
    maxInactivityTime = 86400000L
    'net-buffer' = 2048
    'net-buffer-limit' = 2097152
    'packet-delivery-retry-count' = 15
    pipelining = false
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 48
    'processing-out-threads' = 48
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    'service-connected-timeout' = 60
    'socket-buffer-size' = 4096
    total_bin_limit = 0L
    total_packets_limit = 0L
    trafficThrottling = 'xmpp:2500:0:disc,bin:20m:0:disc'
    trusted = null
    'watchdog-delay' = 600000L
    'watchdog-ping-type' = XMPP
    'watchdog-timeout' = 1740000L
    xmppLimitAction = DISCONNECT
    'client-trust-manager-factory' (class: tigase.server.xmppclient.ClientTrustManagerFactory) {
        clientCertCA = null
        clientCertRequired = false
    }
    commands {}
    connections (class: tigase.server.ConnectionManager$PortsConfigBean,
        exportable: true) {
        ports = [ 5290 ]
        5290 (class: tigase.server.ConnectionManager$PortConfigBean) {
            ifc = null
            'new-connections-throttling' = 200L
            socket = plain
            type = accept
        }
    }
    'disco-extensions' {}
    hybiProtocol (class: tigase.server.websocket.WebSocketHybi) {
        'ws-allow-unmasked-frames' = false
    }
    hyxie76Protocol (class: tigase.server.websocket.WebSocketHixie76,
        active: false) {}
    incomingFilters (class: tigase.server.filters.PacketFiltersBean$IncomingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    outgoingFilters (class: tigase.server.filters.PacketFiltersBean$OutgoingPacketFiltersBean) {
        packetCounter (class: tigase.server.filters.PacketCounter) {}
    }
    routingComputer (class: tigase.util.routing.RoutingsContainer$SingleMode) {}
    seeOtherHost (class: tigase.server.xmppclient.SeeOtherHost) {
        defaultHost = null
        phases = [
            OPEN
        ]
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'ephemeral-key-size' = 4096
        'hardened-mode' = secure
        'max-handshake-message-size' = 65536
        'tls-disable-tls13' = false
        'tls-disabled-ciphers' = null
        'tls-disabled-protocols' = null
        'tls-enabled-ciphers' = [
            'TLS_AES_256_GCM_SHA384',
            'TLS_AES_128_GCM_SHA256',
            'TLS_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_GCM_SHA384',
            'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_GCM_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256',
            'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
            'TLS_DHE_RSA_WITH_AES_128_CBC_SHA',
            'TLS_DHE_DSS_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_256_CBC_SHA',
            'TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA',
            'TLS_ECDH_RSA_WITH_AES_128_CBC_SHA',
            'TLS_EMPTY_RENEGOTIATION_INFO_SCSV'
        ]
        'tls-enabled-protocols' = [ 'TLSv1.3', 'TLSv1.2' ]
        'tls-jdk-nss-bug-workaround-active' = false
    }
    'stream-error-counter' (class: tigase.server.xmppclient.StreamErrorCounterIOProcessor,
        active: false) {}
    'urn:xmpp:sm:3' (class: tigase.server.xmppclient.StreamManagementIOProcessor) {
        'ack-request-count' = 10
        'ack-request-min-delay' = 200L
        'ignore-undelivered-presence' = true
        'max-resumption-queue-size' = 2000
        'max-resumption-timeout' = 900
        'resumption-timeout' = 60
    }
}
